#  Exercise 1: Currencies
# Instructions


#     #Your code starts HERE


# Using the code above, implement the relevant methods and dunder methods which will output the results below.
# Hint : When adding 2 currencies which don’t share the same label you should raise an error.

class Currency:
    def __init__(self, currency, amount):
        self.currency = currency
        self.amount = amount
        
    def __str__(self):
        return f'{self.amount} {self.currency}' #specifies that currency class be represented as strings?
    
    def __repr__(self): #tell how the string should be represented
        return f"Currency('{self.currency}', {self.amount})"
    
    def __eq__(self, other): #comparing currencies
        if isinstance(other, Currency):
            return self.currency == other.currency and self.amount == other.amount
        return False
    def __add__(self, other): #method for adding amounts
        if self.currency == other.currency:
            return Currency(self.currency, self.amount + other.amount)
        else: #what to do if they are conflicting currency's
            raise ValueError("Currencies with different labels cannot be added.")
    def __sub__(self, other):
        if self.currency == other.currency:
            return Currency(self.currency, self.amount - other.amount)
        else:
            raise ValueError("Currencies with different labels cannot be subtracted.")

c1 = Currency('dollar', 5)
c2 = Currency('dollar', 10)
c3 = Currency('shekel', 1)
c4 = Currency('shekel', 10)

print(repr(c1)) # displays class name with currency and amount
print(repr(c2))
print(repr(c3))
print(repr(c4))
print(c1 == c2) #compare currencies
print(c3 == c4) #compare currencies



c5 = c1 + c2
print(c5)

try:
    c6 = c1 + c3
except ValueError as e:
    print(e)
    
try: # subtracting mis matched currencies will return error
    c8 = c1 - c3
except ValueError as e:
    print(e)



# Exercise 3: Random Module
# Instructions
# Create a function that accepts a number between 1 and 100, then rolls a random number between 1 and 100,
# if it’s the same number, display a success message to the user, else don’t.

import random # imports function needed to generate random numbers

def rando(num): #defining a function for random number generating and comparing
    x = random.randrange(1, 100) #generates number and gives it a label
    if x == num: # condition for if random number matches user number
        print("SUCCESS!")
    else:
        print("fail") # condition for if it doesnt match
        
user_number = int(input("Enter a number between 1 and 100: "))
rando(user_number)


# Exercise 4: String Module
# Instructions
# Generate random String of length 5
# Note: String must be the combination of the UPPER case and lower case letters only. No numbers and a special symbol.
# Hint: use the string module

import random #imports function needed to generate random characters
import string #imports characters needed for generating a string


def generate_random_string(length=5): # creating function with name and length
    characters = string.ascii_letters #limiting what kind of characters can be used
    random_string = ''.join(random.choice(characters) for _ in range(length)) #giving a label to the random string generated by this loop
    return random_string #returns the result to memory

random_string = generate_random_string()  # calling the function and naming its result
print(random_string) # printing result


# Exercise 5 : Current Date
# Instructions
# Create a function that displays the current date.
# Hint : Use the datetime module.

import datetime #imports module neccesary for displaying date

def display_current_date():
    current_date = datetime.datetime.now() #generates current date and labels it
    formatted_date = current_date.strftime("%Y-%m-%d") #defines display format and re labels
    print("Current Date: ", formatted_date)
    
display_current_date() #calling the function
    

# Exercise 6 : Amount Of Time Left Until January 1st
# Instructions
# Create a function that displays the amount of time left from now until January 1st.
# (Example: the 1st of January is in 10 days and 10:34:01hours)


import datetime #importing necessary module

def time_left(): # defining function
    current_time = datetime.datetime.now() #establing variable for NOW time
    future_jan = datetime.datetime(current_time.year + 1, 1, 1) # defining target date/time
    difference = future_jan -current_time # calculating how much time is left
    days = difference.days #labeling how many days left
    seconds = difference.seconds #labeling how many seconds left
    hours, remainder = divmod(seconds, 3600) #splitting remainder into hour chunks
    minutes, seconds = divmod(remainder, 60) #  splitting remainder into minutes and seconds
    time_left_str = f"The 1st of January is in {days} days and {hours} hours: {minutes:02}:{seconds:02} hours" #creating print statement
    return time_left_str

time_left = time_left() # labeling
print(time_left)  #calling function


# Exercise 6 : Birthday And Minutes
# Instructions
# Create a function that accepts a birthdate as an argument (in the format of your choice), then displays a message stating how many minutes the user lived in his life.


import datetime

def life_time(birthdate):
    birthdate = datetime.datetime.strptime(birthdate, "%m, %d, %Y") #cleans up input and makes it an object
    now = datetime.datetime.now() #establish now variable
    time_diff = now - birthdate #calculate minutes elapsed
    min_old = time_diff.total_seconds() / 60 #formating for minutes
    return min_old

birthdate = "12, 9, 1981" #inputing birthday
min_old = life_time(birthdate) # calling function 
print(f"you are {int(min_old)} minutes old.") #printing result

# Exercise 7 : Faker Module
# Instructions
# Install the faker module, and take a look at the documentation and learn how to properly implement faker in your code.
# Create an empty list called users. Tip: It should be a list of dictionaries.
# Create a function that adds new dictionaries to the users list. Each user has the following keys: name, adress, langage_code. Use faker to populate them with fake data.
    
from faker import Faker  # import modules
import random

fake = Faker() #create fake person entity

users = [] #creates empty list for user list

def generate_fake_user(): #establish function to create the data for fake person
    user = {
        "name": fake.name(),
        "address": fake.address(),
        "language_code": random.choice(["en", "fr", "es", "de"])
    }
    return user

for _ in range(5): # generates 5 fake people and their info using a FOR loop
    user_data = generate_fake_user() #calling function that generates data
    users.append(user_data) #adds people to list users
    
for idx, user in enumerate(users, start=1): #for loop cycling through fake user index
    print(f"User {idx}:")
    print(f"Name: {user['name']}")
    print(f"Address: {user['address']}")
    print(f"Language Code: {user['language_code']}")
    print("\n")